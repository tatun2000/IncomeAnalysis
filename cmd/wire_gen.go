// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/google/wire"
	"telegrammbot.core/internal/config"
	"telegrammbot.core/internal/domains/oauth"
	"telegrammbot.core/internal/domains/sheet"
	"telegrammbot.core/internal/domains/telegram"
)

// Injectors from wire.go:

func InjectAppGod(ctx context.Context, cfgPath string) (*app, func(), error) {
	mainTracerDummy, cleanup, err := newTracer(ctx)
	if err != nil {
		return nil, nil, err
	}
	configConfig, err := config.NewConfig(cfgPath)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	generalOpts := configConfig.GeneralOpts
	oauthOpts := configConfig.OauthOpts
	service, cleanup2, err := oauth.NewService(generalOpts, oauthOpts)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sheetOpts := configConfig.SheetOpts
	sheetService := sheet.NewService(service, sheetOpts)
	botOpts := configConfig.BotOpts
	telegramService, err := telegram.NewService(sheetService, botOpts)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mainApp := &app{
		tracer:          mainTracerDummy,
		telegramService: telegramService,
	}
	return mainApp, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var (
	OauthSet    = wire.NewSet(wire.Bind(new(sheet.IOauthService), new(*oauth.Service)), oauth.NewService)
	SheetSet    = wire.NewSet(wire.Bind(new(telegram.ISheetService), new(*sheet.Service)), sheet.NewService)
	TelegramSet = wire.NewSet(telegram.NewService)
)
